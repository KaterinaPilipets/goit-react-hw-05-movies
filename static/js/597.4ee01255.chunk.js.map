{"version":3,"file":"static/js/597.4ee01255.chunk.js","mappings":"+SAEMA,EAAU,mCAGT,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,qGACkBC,EAAAA,EAAAA,GAAM,wBAAyB,CACpDC,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,wFACkBN,EAAAA,EAAAA,GAAM,kBAAmB,CAC9CC,OAAQ,CACNC,QAASJ,EACTS,MAAOD,EACPE,KAAM,KALL,cACCL,EADD,yBAQEA,EAASC,MARX,kEAWA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA4BC,GAA5B,wFACkBV,EAAAA,EAAAA,GAAM,YAAD,OAAaU,GAAW,CAClDT,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,wFACkBV,EAAAA,EAAAA,GAAM,YAAD,OAAaU,EAAb,YAAgC,CAC1DT,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeQ,EAAtB,kC,aAAO,O,oBAAA,WAAiCF,GAAjC,wFACkBV,EAAAA,EAAAA,GAAM,YAAD,OAAaU,EAAb,YAAgC,CAC1DT,OAAQ,CACNC,QAASJ,KAHR,cACCK,EADD,yBAMEA,EAASC,MANX,kEAzCPJ,EAAAA,EAAAA,SAAAA,QAAyB,6B,yGC4CzB,UA3CgB,WACd,IAAQU,GAAYG,EAAAA,EAAAA,MAAZH,QACR,GAAsCI,EAAAA,EAAAA,UAAS,MAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAkBA,OAjBAC,EAAAA,EAAAA,YAAU,WACR,GAAKP,EAAL,CAGA,IAAMQ,EAAK,mCAAG,8GAEUN,EAAAA,EAAAA,IAAkBF,GAF5B,OAEJS,EAFI,OAGVH,EAAeG,EAAMC,SAHX,uDAKVC,MAAM,EAAD,IALK,4EAAH,qDAUXH,GAXC,CAYF,GAAE,CAACR,IAECK,EAIsB,IAAvBA,EAAYO,QACP,4EAIP,0BACE,+BACGP,QADH,IACGA,OADH,EACGA,EAAaQ,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,2BACE,sCACU,0BAAOD,QAEjB,uBAAIC,MAJGF,EADO,QAVf,IAqBV,C","sources":["API/index.js","components/MovieInfo/Reviews.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '8c3b14bfd964334b0e677cd4ab73e9a9';\naxios.defaults.baseURL = 'https://api.themoviedb.org/';\n\nexport async function fetchTrending() {\n  const response = await axios('/3/trending/movie/day', {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n\n  return response.data;\n}\n\nexport async function fetchMoviesByName(name) {\n  const response = await axios('/3/search/movie', {\n    params: {\n      api_key: API_KEY,\n      query: name,\n      page: 1,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieId(movieId) {\n  const response = await axios(`/3/movie/${movieId}`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieCredits(movieId) {\n  const response = await axios(`/3/movie/${movieId}/credits`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n\nexport async function fetchMovieReviews(movieId) {\n  const response = await axios(`/3/movie/${movieId}/reviews`, {\n    params: {\n      api_key: API_KEY,\n    },\n  });\n  return response.data;\n}\n// export const fetchMovie = (movieId, fetchMovieFunc) => {\n//   let movie = null;\n//   if (!movieId) {\n//     return;\n//   }\n//   const fetch = async () => {\n//     try {\n//       movie = await fetchMovieFunc(movieId);\n//     } catch (error) {\n//       alert(error);\n//       return;\n//     }\n//   };\n//   fetch();\n//   return movie;\n// };\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieReviews } from 'API';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [curentMovie, setCurentMovie] = useState(null);\n  useEffect(() => {\n    if (!movieId) {\n      return;\n    }\n    const fetch = async () => {\n      try {\n        const movie = await fetchMovieReviews(movieId);\n        setCurentMovie(movie.results);\n      } catch (error) {\n        alert(error);\n        return;\n      }\n    };\n\n    fetch();\n  }, [movieId]);\n\n  if (!curentMovie) {\n    return null;\n  }\n\n  if (curentMovie.length === 0) {\n    return <p>Sorry we don't have any reviews for this movie!</p>;\n  }\n\n  return (\n    <div>\n      <ul>\n        {curentMovie?.map(({ id, author, content }) => (\n          <li key={id}>\n            <h2>\n              Author: <span>{author}</span>\n            </h2>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\nexport default Reviews;\n"],"names":["API_KEY","fetchTrending","axios","params","api_key","response","data","fetchMoviesByName","name","query","page","fetchMovieId","movieId","fetchMovieCredits","fetchMovieReviews","useParams","useState","curentMovie","setCurentMovie","useEffect","fetch","movie","results","alert","length","map","id","author","content"],"sourceRoot":""}